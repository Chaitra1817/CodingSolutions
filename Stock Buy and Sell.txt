Stock buy and sell 
Medium Accuracy: 39.53% Submissions: 27629 Points: 4
The cost of stock on each day is given in an array A[] of size N. Find all the days on which you buy and sell the stock so that in between those days your profit is maximum.

Example 1:

Input:
N = 7
A[] = {100,180,260,310,40,535,695}
Output: (0 3) (4 6)
Explanation: We can buy stock on day 
0, and sell it on 3rd day, which will 
give us maximum profit. Now, we buy 
stock on day 4 and sell it on day 6.


###code

#User function template for Python

class Solution:
	def stockBuySell(self, A, n):
		#code here
		result=[]
		if(n==1):
		    return result
		    
		i=0
		cnt=0
		while(i<n-1):
		    ##this is for local minima
		    while(i<n-1 and (A[i+1]<=A[i])):
		        i=i+1
            if(i==n-1):
                break
            e=[0,0]
            e[0]=i
            i=i+1
            #this is for local maxima
			while((i<n)and A[i]>=A[i-1]):
			    i+=1
			e[1]=i-1
			result.append([e[0],e[1]])
		    
		    cnt+=1
		if(cnt==0):
		    return []
		else:
		    return result
			

#{ 
#  Driver Code Starts
#Initial template for Python

if __name__=='__main__':
	t = int(input())
	while(t>0):
		n = int(input())
		A = [int(x) for x in input().strip().split()]
		ob = Solution()
		ans = ob.stockBuySell(A,n)
		if(len(ans) == 0):
			print("No Profit",end="")
		else:
			for i in range(len(ans)):
				print("(",end="")
				print(ans[i][0],end=" ")
				print(ans[i][1],end=") ")
		print()
		t-=1
# } Driver Code Ends
