SPIRALLY MATRIX PROBLEM:

Given a matrix of size R*C. Traverse the matrix in spiral form.

Example 1:

Input:
R = 4, C = 4
matrix[][] = {{1, 2, 3, 4},
           {5, 6, 7, 8},
           {9, 10, 11, 12},
           {13, 14, 15,16}}
Output: 
1 2 3 4 8 12 16 15 14 13 9 5 6 7 11 10
Explanation:


Expected Time Complexity: O(R*C)#User function Template for python3

def spirallyTraverse(matrix, r, c): 
    # code here
    top=0
    down=r-1
    left=0
    right=c-1
    dir=0
    arr=[]
    while(top<=down and left<=right):
        if dir==0:
            for i in range(left,right+1):
                arr.append(matrix[top][i])
            top+=1
        elif dir==1:
            for i in range(top,down+1):
                arr.append(matrix[i][right])
            right-=1
        elif dir==2:
            for i in range(right,left-1,-1):
                arr.append(matrix[down][i])
            down-=1
        elif dir==3:
            for i in range(down,top-1,-1):
                arr.append(matrix[i][left])
            left+=1
        
        dir=(dir+1)%4
    return arr
    



#{ 
#  Driver Code Starts
#Initial Template for Python 3

if __name__ == '__main__':
    t = int(input())
    for _ in range(t):
        r,c = map(int, input().strip().split())
        values = list(map(int, input().strip().split()))
        k = 0
        matrix =[]
        for i in range(r):
            row=[]
            for j in range(c):
                row.append(values[k])
                k+=1
            matrix.append(row)
        ans = spirallyTraverse(matrix,r,c)
        for i in ans:
            print(i,end=" ")
        print()

# } Driver Code Ends
Expected Auxiliary Space: O(R*C)

Constraints:
2 <= R, C <= 100
0 <= matrixi <= 100

